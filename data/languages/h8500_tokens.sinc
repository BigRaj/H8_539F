#
# h8500_tokens.sinc
# Core tokens / registers / spaces for H8/539F (Ghidra 11.x compatible)
#

# basic properties
define endian = big;
define alignment = 2;

# pcode ops commonly used
define pcodeop nop;
define pcodeop Sleep_Standby;

# ---- Memory spaces ----
# Internal 16-bit address space (64 KB)
define space ram type=ram_space size=2;
# Register file (16-bit accesses)
define space register type=register_space size=2;

define space address type=ram_space size=3 default;

# ---- Registers ----
# 16-bit general registers r0..r7 r6 = FP, r7 = SP
define register offset=0x00 size=2 [ r0 r1 r2 r3 r4 r5 r6 r7 ];

# program counter (16-bit internal representation)
define register offset=0x10 size=2 [ pc ];

# condition code register (CCR / ccr) 1 byte
define register offset=0x12 size=1 [ ccr ];

# page / pointer registers (dp/ep/tp/br) 1 byte each
define register offset=0x13 size=1 [ dp ep tp br ];

# ---- Flag aliases (bit-slices into ccr) ----
# bit positions per manual (bit 7..0)
@define I_FLAG  "ccr[7,1]"
@define UI_FLAG "ccr[6,1]"
@define H_FLAG  "ccr[5,1]"
@define U_FLAG  "ccr[4,1]"
@define N_FLAG  "ccr[3,1]"
@define Z_FLAG  "ccr[2,1]"
@define V_FLAG  "ccr[1,1]"
@define C_FLAG  "ccr[0,1]"

# ---- Common tokens for instruction formats ----
# simple 8-bit op token
define token instr8(8)
  op8 = (0,7)
;

# 16-bit token: high opcode byte + low operand byte (fields named to match Appendix A)
define token instr16(16)
  op_hi = (8,15)
  #op_mid = (8,11)
  op_lo = (0,7)
  Sz = (7,7)
  r_dst = (0,2)
  r_src = (3,5)
  r_rrr = (0,2)
  instr16_imm8 = (0,7)
  instr16_disp8 = (0,7)
  instr16_imm16 = (0,15)
;

define token eainstr16(16)
	ea  = (12,15)
	Size  = (11,11)
	rrr = (8,10)
	op  = (3,7)
	rd = (0,2)
; 

# variants for twin-word / short-format encoding if needed
define token instr16_2(16)
  opcode_full = (0,15)
  rd_field     = (8,10)
  rs_field     = (11,13)
  disp_lo      = (0,7)
;

# ---- Convenience attaches ----
# Attach 3-bit register fields to r0..r7 for easy use in constructors
attach variables [ rd rrr r_rrr r_dst r_src rd_field rs_field ] [ r0 r1 r2 r3 r4 r5 r6 r7 ];

# ---- Safety: fallback unknown opcode pcode (no-op) ----
# Use a constructor for unknown single byte opcodes if needed in later files:
:unknown_8 is op8=0xFF { nop(); }

# End of h8500_tokens.sinc
